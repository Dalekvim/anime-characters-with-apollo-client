{"version":3,"sources":["constants/query.ts","pages/Character.tsx","pages/Characters.tsx","pages/Home.tsx","App.tsx","index.tsx"],"names":["CHARACTERS","gql","CHARACTER","Character","match","useQuery","variables","id","params","loading","error","data","console","bind","image","name","description","to","src","large","alt","full","style","float","dangerouslySetInnerHTML","__html","Characters","useState","page","setPage","perPage","Media","characters","edges","pageInfo","prevButton","onClick","nextButton","lastPage","map","character","node","Home","href","App","path","component","exact","render","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","StrictMode","document","getElementById"],"mappings":"i2BAEO,IAAMA,EAAaC,cAAH,KAqBVC,EAAYD,cAAH,KCjBTE,EAA6B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACtBC,mBAASH,EAAW,CACnDI,UAAW,CAAEC,GAAIH,EAAMI,OAAOD,MADxBE,EAD+C,EAC/CA,QAASC,EADsC,EACtCA,MAAOC,EAD+B,EAC/BA,KAIxB,GAAIF,EAAS,OAAO,wCACpB,GAAIC,EACF,OACE,qCACGE,QAAQF,MAAMG,KAAKH,GACpB,4CAViD,MAclBC,EAAKR,UAAlCW,EAd+C,EAc/CA,MAAOC,EAdwC,EAcxCA,KAAMC,EAdkC,EAclCA,YAErB,OACE,qCACE,cAAC,IAAD,CAAMC,GAAG,cAAT,sBACA,uBACA,qBAAKC,IAAKJ,EAAMK,MAAOC,IAAKL,EAAKM,KAAMC,MAAO,CAAEC,MAAO,UACvD,wCAAWR,EAAKM,QAChB,qBAAKG,wBAAyB,CAAEC,OAAQT,S,QCnBjCU,EAAuB,WAAO,IAAD,EAChBC,mBAAiB,GADD,mBACjCC,EADiC,KAC3BC,EAD2B,OAGPxB,mBAASL,EAAY,CACpDM,UAAW,CAAEsB,KAAMA,EAAME,QAAS,MAD5BrB,EAHgC,EAGhCA,QAASC,EAHuB,EAGvBA,MAAOC,EAHgB,EAGhBA,KAIxB,GAAIF,EAAS,OAAO,wCACpB,GAAIC,EACF,OACE,qCACGE,QAAQF,MAAMG,KAAKH,GACpB,4CAZkC,MAgBZC,EAAKoB,MAAMC,WAA/BC,EAhBgC,EAgBhCA,MAAOC,EAhByB,EAgBzBA,SAETC,EACJ,wBACEC,QAAS,WACPP,EAAQD,EAAO,IAFnB,kBAQIS,EACJ,wBACED,QAAS,WACPP,EAAQD,EAAO,IAFnB,kBASF,OACE,qCACE,cAAC,IAAD,CAAMX,GAAG,IAAT,kBACA,4CACA,uCAAUW,KACA,IAATA,EAAa,KAAOO,EACpBP,IAASM,EAASI,SAAW,KAAOD,EACpCJ,EAAMM,KAAI,SAACC,GAAD,OACT,gCACE,uBACA,cAAC,IAAD,CAAMvB,GAAE,qBAAgBuB,EAAUC,KAAKlC,IAAvC,SACGiC,EAAUC,KAAK1B,KAAKM,SAHfmB,EAAUC,KAAKlC,WCpDpBmC,EAAiB,WAC5B,OACE,qCACE,sCACA,yDAC0B,mBAAGC,KAAK,8BAAR,kBAD1B,OAFF,SAKS,SACP,cAAC,IAAD,CAAM1B,GAAG,cAAT,wBACC,MACD,uBACA,+GCRO2B,EAAgB,WAC3B,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWJ,EAAMK,OAAK,IACtC,cAAC,IAAD,CAAOF,KAAK,cAAcC,UAAWpB,EAAYqB,OAAK,IACtD,cAAC,IAAD,CAAOF,KAAK,iBAAiBC,UAAW3C,EAAW4C,OAAK,IACxD,cAAC,IAAD,CACEF,KAAK,IACLG,OAAQ,kBACN,iEAEE,uBACA,cAAC,IAAD,CAAM/B,GAAG,IAAT,gCCXNgC,EAAS,IAAIC,eAAa,CAC9BC,IAAK,6BACLC,MAAO,IAAIC,kBAGbC,IAASN,OACP,cAAC,IAAMO,WAAP,UACE,cAAC,iBAAD,CAAgBN,OAAQA,EAAxB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,UAINO,SAASC,eAAe,W","file":"static/js/main.1f8499a9.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const CHARACTERS = gql`\n  query($page: Int, $perPage: Int) {\n    Media(type: ANIME) {\n      id\n      characters(page: $page, perPage: $perPage) {\n        edges {\n          node {\n            id\n            name {\n              full\n            }\n          }\n        }\n        pageInfo {\n          lastPage\n        }\n      }\n    }\n  }\n`;\n\nexport const CHARACTER = gql`\n  query($id: Int) {\n    Character(id: $id) {\n      image {\n        large\n      }\n      name {\n        full\n        native\n      }\n      description(asHtml: true)\n    }\n  }\n`;\n","import { useQuery } from \"@apollo/client\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport { CHARACTER } from \"src/constants/query\";\n\ninterface Props extends RouteComponentProps<{ id: string }> {}\n\nexport const Character: React.FC<Props> = ({ match }) => {\n  const { loading, error, data } = useQuery(CHARACTER, {\n    variables: { id: match.params.id },\n  });\n\n  if (loading) return <p>Loading</p>;\n  if (error)\n    return (\n      <>\n        {console.error.bind(error)}\n        <p>Error :(</p>\n      </>\n    );\n\n  const { image, name, description } = data.Character;\n\n  return (\n    <>\n      <Link to=\"/characters\">Go back.</Link>\n      <br />\n      <img src={image.large} alt={name.full} style={{ float: \"left\" }} />\n      <h2>Name: {name.full}</h2>\n      <div dangerouslySetInnerHTML={{ __html: description }} />\n    </>\n  );\n};\n","import { useQuery } from \"@apollo/client\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { CHARACTERS } from \"../constants/query\";\n\ninterface ICharacter {\n  node: { id: number; name: { full: string } };\n}\n\nexport const Characters: React.FC = () => {\n  const [page, setPage] = useState<number>(1);\n\n  const { loading, error, data } = useQuery(CHARACTERS, {\n    variables: { page: page, perPage: 10 },\n  });\n\n  if (loading) return <p>Loading</p>;\n  if (error)\n    return (\n      <>\n        {console.error.bind(error)}\n        <p>Error :(</p>\n      </>\n    );\n\n  const { edges, pageInfo } = data.Media.characters;\n\n  const prevButton = (\n    <button\n      onClick={() => {\n        setPage(page - 1);\n      }}\n    >\n      Prev\n    </button>\n  );\n  const nextButton = (\n    <button\n      onClick={() => {\n        setPage(page + 1);\n      }}\n    >\n      Next\n    </button>\n  );\n\n  return (\n    <>\n      <Link to=\"/\">Home</Link>\n      <h1>Characters</h1>\n      <p>Page: {page}</p>\n      {page === 1 ? null : prevButton}\n      {page === pageInfo.lastPage ? null : nextButton}\n      {edges.map((character: ICharacter) => (\n        <div key={character.node.id}>\n          <br />\n          <Link to={`/character/${character.node.id}`}>\n            {character.node.name.full}\n          </Link>\n        </div>\n      ))}\n    </>\n  );\n};\n","import { Link } from \"react-router-dom\";\n\nexport const Home: React.FC = () => {\n  return (\n    <>\n      <h1>Home</h1>\n      <p>\n        All the data comes from <a href=\"https://anilist.co/graphiql\">here</a>.\n      </p>\n      Click {\"-->\"}\n      <Link to=\"/characters\">Characters</Link>\n      {\"<--\"}\n      <br />\n      <p>\n        This has a list of anime characters. You can click on them to see\n        details.\n      </p>\n    </>\n  );\n};\n","import { Link, Route, Switch } from \"react-router-dom\";\nimport { Character } from \"./pages/Character\";\nimport { Characters } from \"./pages/Characters\";\nimport { Home } from \"./pages/Home\";\n\nexport const App: React.FC = () => {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} exact />\n      <Route path=\"/characters\" component={Characters} exact />\n      <Route path=\"/character/:id\" component={Character} exact />\n      <Route\n        path=\"/\"\n        render={() => (\n          <>\n            404 Page error not found.\n            <br />\n            <Link to=\"/\">Go home.</Link>\n          </>\n        )}\n      />\n    </Switch>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"https://graphql.anilist.co\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}